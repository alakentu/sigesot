/*!
 * gmDateTimePicker
 *
 * Author: Gonzalo R. Meneses A
 * http://github.com/alakentu
 * 
 * Based on the work T00rk
 * https://github.com/T00rk
 *
 * Copyright 2021 Gonzalo R. Meneses A (https://github.com/alakentu)
 * Licensed under MIT (https://github.com/alakentu/gmDateTimePicker/LICENSE)
 */!function (t) { "use strict"; if ("function" == typeof define && define.amd) define(["jquery", "moment"], t); else if ("object" == typeof exports) module.exports = t(require("jquery"), require("moment")); else { if ("undefined" == typeof jQuery) throw "gmDateTimePicker requires jQuery to be loaded first"; if ("undefined" == typeof moment) throw "gmDateTimePicker requires Moment.js to be loaded first"; t(jQuery, moment) } }(function (r, l) { "use strict"; if (!l) throw new Error("gmDateTimePicker requires Moment.js to be loaded first"); var t = "gmDateTimePicker", a = "plugin_" + t; function i(t, e) { this.currentView = 0, this.minDate, this.maxDate, this._attachedEvents = [], this.element = t, this.$element = r(t), this.params = { date: !0, time: !0, format: "DD-MM-YYYY", minDate: null, maxDate: null, currentDate: null, lang: "es", weekStart: 0, disabledDays: [], shortTime: !1, clearButton: !1, nowButton: !1, cancelText: "Cancelar", okText: "OK", clearText: "Limpiar", nowText: "Hoy", switchOnClick: !0, triggerEvent: "focus", monthPicker: !1, year: !0 }, this.params = r.fn.extend(this.params, e), this.name = "dtp_" + this.setName(), this.$element.attr("data-dtp", this.name), l.locale(this.params.lang), this.init() } l.locale("es"), r.fn[t] = function (t, e) { return this.each(function () { r.data(this, a) ? ("function" == typeof r.data(this, a)[t] && r.data(this, a)[t](e), "destroy" === t && r.data(this, a)) : r.data(this, a, new i(this, t)) }), this }, i.prototype = { init: function () { this.initDays(), this.initDates(), this.initTemplate(), this.initButtons(), this._attachEvent(r(window), "resize", this._centerBox.bind(this)), this._attachEvent(this.$dtpElement.find(".dtp-content"), "click", this._onElementClick.bind(this)), this._attachEvent(this.$dtpElement, "click", this._onBackgroundClick.bind(this)), this._attachEvent(this.$element, this.params.triggerEvent, this._fireCalendar.bind(this)) }, initDays: function () { this.days = []; for (var t = this.params.weekStart; this.days.length < 7; t++)this.days.push((t = 6 < t ? 0 : t).toString()) }, initDates: function () { var t; 0 < this.$element.val().length ? void 0 !== this.params.format && null !== this.params.format ? this.currentDate = l(this.$element.val(), this.params.format).locale(this.params.lang) : this.currentDate = l(this.$element.val()).locale(this.params.lang) : void 0 !== this.$element.attr("value") && null !== this.$element.attr("value") && "" !== this.$element.attr("value") ? "string" == typeof this.$element.attr("value") && (void 0 !== this.params.format && null !== this.params.format ? this.currentDate = l(this.$element.attr("value"), this.params.format).locale(this.params.lang) : this.currentDate = l(this.$element.attr("value")).locale(this.params.lang)) : void 0 !== this.params.currentDate && null !== this.params.currentDate ? ("string" == typeof this.params.currentDate ? void 0 !== this.params.format && null !== this.params.format ? this.currentDate = l(this.params.currentDate, this.params.format).locale(this.params.lang) : this.currentDate = l(this.params.currentDate).locale(this.params.lang) : void 0 === this.params.currentDate.isValid || "function" != typeof this.params.currentDate.isValid ? (t = this.params.currentDate.getTime(), this.currentDate = l(t, "x").locale(this.params.lang)) : this.currentDate = this.params.currentDate, this.$element.val(this.currentDate.format(this.params.format))) : this.currentDate = l(), void 0 !== this.params.minDate && null !== this.params.minDate ? "string" == typeof this.params.minDate ? void 0 !== this.params.format && null !== this.params.format ? this.minDate = l(this.params.minDate, this.params.format).locale(this.params.lang) : this.minDate = l(this.params.minDate).locale(this.params.lang) : void 0 === this.params.minDate.isValid || "function" != typeof this.params.minDate.isValid ? (t = this.params.minDate.getTime(), this.minDate = l(t, "x").locale(this.params.lang)) : this.minDate = this.params.minDate : null === this.params.minDate && (this.minDate = null), void 0 !== this.params.maxDate && null !== this.params.maxDate ? "string" == typeof this.params.maxDate ? void 0 !== this.params.format && null !== this.params.format ? this.maxDate = l(this.params.maxDate, this.params.format).locale(this.params.lang) : this.maxDate = l(this.params.maxDate).locale(this.params.lang) : void 0 === this.params.maxDate.isValid || "function" != typeof this.params.maxDate.isValid ? (t = this.params.maxDate.getTime(), this.maxDate = l(t, "x").locale(this.params.lang)) : this.maxDate = this.params.maxDate : null === this.params.maxDate && (this.maxDate = null), this.isAfterMinDate(this.currentDate) || (this.currentDate = l(this.minDate)), this.isBeforeMaxDate(this.currentDate) || (this.currentDate = l(this.maxDate)) }, initTemplate: function () { for (var t = "", e = this.currentDate.year(), a = e - 3; a < e + 4; a++)t += '<div class="year-picker-item" data-year="' + a + '">' + a + "</div>"; this.midYear = e, this.template = '<div class="dtp d-none" id="' + this.name + '"><div class="dtp-content"><div class="dtp-date-view bg-dark text-white"><header class="dtp-header"><div class="dtp-actual-day">Monday</div></header><div class="dtp-date d-none"><div><div class="left center p10"><a href="javascript:void(0);" class="dtp-select-month-before"><i class="bi bi-chevron-left"></i></a></div><div class="dtp-actual-month p80">MAR</div><div class="right center p10"><a href="javascript:void(0);" class="dtp-select-month-after"><i class="bi bi-chevron-right"></i></a></div><div class="clearfix"></div></div><div class="dtp-actual-num">13</div><div><div class="left center p10"><a href="javascript:void(0);" class="dtp-select-year-before"><i class="bi bi-chevron-left"></i></a></div><div class="dtp-actual-year p80' + (this.params.year ? "" : " disabled") + '">2018</div><div class="right center p10"><a href="javascript:void(0);" class="dtp-select-year-after"><i class="bi bi-chevron-right"></i></a></div><div class="clearfix"></div></div></div><div class="dtp-time d-none"><div class="dtp-actual-maxtime">23:55</div></div><div class="dtp-picker"><div class="dtp-picker-calendar"></div><div class="dtp-picker-datetime d-none"><div class="dtp-actual-meridien"><div class="left p20"><a class="dtp-meridien-am" href="javascript:void(0);">AM</a></div><div class="dtp-actual-time p60"></div><div class="right p20"><a class="dtp-meridien-pm" href="javascript:void(0);">PM</a></div><div class="clearfix"></div></div><div id="dtp-svg-clock"></div></div>' + ('<div class="dtp-picker-year d-none" ><div><div class="d-grid gap-2"><a href="javascript:void(0);" class="btn btn-sm btn-outline-dark dtp-select-year-range before m-0"><i class="bi bi-chevron-up"></i></a></div></div>' + t + '<div><div class="d-grid gap-2"><a href="javascript:void(0);" class="btn btn-sm btn-outline-dark dtp-select-year-range after m-0"><i class="bi bi-chevron-down"></i></a></div></div></div>') + '</div></div><div class="dtp-buttons bg-dark"><button class="dtp-btn-now btn btn-sm btn-outline-primary d-none">' + this.params.nowText + '</button><button class="dtp-btn-clear btn btn-sm btn-outline-primary d-none">' + this.params.clearText + '</button><button class="dtp-btn-cancel btn btn-sm btn-outline-primary">' + this.params.cancelText + '</button><button class="dtp-btn-ok btn btn-sm btn-outline-primary">' + this.params.okText + '</button><div class="clearfix"></div></div></div></div>', r("body").find("#" + this.name).length <= 0 && (r("body").append(this.template), this && (this.dtpElement = r("body").find("#" + this.name)), this.$dtpElement = r(this.dtpElement)) }, initButtons: function () { this._attachEvent(this.$dtpElement.find(".dtp-btn-cancel"), "click", this._onCancelClick.bind(this)), this._attachEvent(this.$dtpElement.find(".dtp-btn-ok"), "click", this._onOKClick.bind(this)), this._attachEvent(this.$dtpElement.find("a.dtp-select-month-before"), "click", this._onMonthBeforeClick.bind(this)), this._attachEvent(this.$dtpElement.find("a.dtp-select-month-after"), "click", this._onMonthAfterClick.bind(this)), this._attachEvent(this.$dtpElement.find("a.dtp-select-year-before"), "click", this._onYearBeforeClick.bind(this)), this._attachEvent(this.$dtpElement.find("a.dtp-select-year-after"), "click", this._onYearAfterClick.bind(this)), this._attachEvent(this.$dtpElement.find(".dtp-actual-year"), "click", this._onActualYearClick.bind(this)), this._attachEvent(this.$dtpElement.find("a.dtp-select-year-range.before"), "click", this._onYearRangeBeforeClick.bind(this)), this._attachEvent(this.$dtpElement.find("a.dtp-select-year-range.after"), "click", this._onYearRangeAfterClick.bind(this)), this._attachEvent(this.$dtpElement.find("div.year-picker-item"), "click", this._onYearItemClick.bind(this)), !0 === this.params.clearButton && (this._attachEvent(this.$dtpElement.find(".dtp-btn-clear"), "click", this._onClearClick.bind(this)), this.$dtpElement.find(".dtp-btn-clear").removeClass("d-none")), !0 === this.params.nowButton && (this._attachEvent(this.$dtpElement.find(".dtp-btn-now"), "click", this._onNowClick.bind(this)), this._attachEvent(this.$dtpElement.find(".dtp-btn-now"), "click", this._onOKClick.bind(this)), this.$dtpElement.find(".dtp-btn-now").removeClass("d-none")), (!0 === this.params.nowButton && !0 === this.params.clearButton || !0 === this.params.nowButton || !0 === this.params.clearButton) && this.$dtpElement.find(".dtp-btn-clear, .dtp-btn-now, .dtp-btn-cancel, .dtp-btn-ok").addClass("btn-sm") }, initMeridienButtons: function () { this.$dtpElement.find("a.dtp-meridien-am").off("click").on("click", this._onSelectAM.bind(this)), this.$dtpElement.find("a.dtp-meridien-pm").off("click").on("click", this._onSelectPM.bind(this)) }, initDate: function (t) { this.currentView = 0, !1 === this.params.monthPicker && this.$dtpElement.find(".dtp-picker-calendar").removeClass("d-none"), this.$dtpElement.find(".dtp-picker-datetime").addClass("d-none"), this.$dtpElement.find(".dtp-picker-year").addClass("d-none"); var e = void 0 !== this.currentDate && null !== this.currentDate ? this.currentDate : null, a = this.generateCalendar(this.currentDate); void 0 !== a.week && void 0 !== a.days && (a = this.constructHTMLCalendar(e, a), this.$dtpElement.find("a.dtp-select-day").off("click"), this.$dtpElement.find(".dtp-picker-calendar").html(a), this.$dtpElement.find("a.dtp-select-day").on("click", this._onSelectDate.bind(this)), this.toggleButtons(e)), this._centerBox(), this.showDate(e) }, initHours: function () { this.currentView = 1, this.showTime(this.currentDate), this.initMeridienButtons(), (this.currentDate.hour() < 12 ? this.$dtpElement.find("a.dtp-meridien-am") : this.$dtpElement.find("a.dtp-meridien-pm")).click(); for (var t = this.params.shortTime ? "h" : "H", e = (this.$dtpElement.find(".dtp-picker-datetime").removeClass("d-none"), this.$dtpElement.find(".dtp-picker-calendar").addClass("d-none"), this.$dtpElement.find(".dtp-picker-year").addClass("d-none"), this.createSVGClock(!0)), a = 0; a < 12; a++) { var i = -162 * Math.sin(2 * -Math.PI * (a / 12)), s = -162 * Math.cos(2 * -Math.PI * (a / 12)), n = this.currentDate.format(t) == a ? "var(--primary)" : "transparent", r = this.currentDate.format(t) == a ? "var(--white)" : "var(--black)", d = this.createSVGElement("circle", { id: "h-" + a, class: "dtp-select-hour", r: "30", cx: i, cy: s, fill: n, "data-hour": a }); (l = this.createSVGElement("text", { id: "th-" + a, class: "dtp-select-hour-text", "text-anchor": "middle", style: "cursor:pointer", "font-weight": "normal", "font-size": "20", x: i, y: s + 7, fill: r, "data-hour": a })).textContent = 0 === a && this.params.shortTime ? 12 : a, this.toggleTime(a, !0) ? (d.addEventListener("click", this._onSelectHour.bind(this)), l.addEventListener("click", this._onSelectHour.bind(this))) : (d.className += " disabled", l.className += " disabled", l.setAttribute("fill", "var(--grey)")), e.appendChild(d), e.appendChild(l) } if (!this.params.shortTime) { for (a = 0; a < 12; a++) { var l, i = -110 * Math.sin(2 * -Math.PI * (a / 12)), s = -110 * Math.cos(2 * -Math.PI * (a / 12)), n = this.currentDate.format(t) == a + 12 ? "var(--primary)" : "transparent", r = this.currentDate.format(t) == a + 12 ? "var(--white)" : "rgba(0,0,0,.87)", d = this.createSVGElement("circle", { id: "h-" + (a + 12), class: "dtp-select-hour", style: "cursor:pointer", r: "30", cx: i, cy: s, fill: n, "data-hour": a + 12 }); (l = this.createSVGElement("text", { id: "th-" + (a + 12), class: "dtp-select-hour-text", "text-anchor": "middle", style: "cursor:pointer", "font-weight": "normal", "font-size": "22", x: i, y: s + 7, fill: r, "data-hour": a + 12 })).textContent = a + 12, this.toggleTime(a + 12, !0) ? (d.addEventListener("click", this._onSelectHour.bind(this)), l.addEventListener("click", this._onSelectHour.bind(this))) : (d.className += " disabled", l.className += " disabled", l.setAttribute("fill", "var(--grey)")), e.appendChild(d), e.appendChild(l) } this.$dtpElement.find("a.dtp-meridien-am").addClass("d-none"), this.$dtpElement.find("a.dtp-meridien-pm").addClass("d-none") } this._centerBox() }, initMinutes: function () { this.currentView = 2, this.showTime(this.currentDate), this.initMeridienButtons(), (this.currentDate.hour() < 12 ? this.$dtpElement.find("a.dtp-meridien-am") : this.$dtpElement.find("a.dtp-meridien-pm")).click(), this.$dtpElement.find(".dtp-picker-year").addClass("d-none"), this.$dtpElement.find(".dtp-picker-calendar").addClass("d-none"), this.$dtpElement.find(".dtp-picker-datetime").removeClass("d-none"); for (var t = this.createSVGClock(!1), e = 0; e < 60; e++) { var a = e % 5 == 0 ? 162 : 158, i = e % 5 == 0 ? 30 : 20, s = -(a * Math.sin(2 * -Math.PI * (e / 60))), n = -(a * Math.cos(2 * -Math.PI * (e / 60))), r = this.currentDate.format("m") == e ? "var(--primary)" : "transparent", a = this.createSVGElement("circle", { id: "m-" + e, class: "dtp-select-minute", style: "cursor:pointer", r: i, cx: s, cy: n, fill: r, "data-minute": e }); this.toggleTime(e, !1) ? a.addEventListener("click", this._onSelectMinute.bind(this)) : a.className += " disabled", t.appendChild(a) } for (var d, e = 0; e < 60; e++)e % 5 == 0 && (s = -162 * Math.sin(2 * -Math.PI * (e / 60)), n = -162 * Math.cos(2 * -Math.PI * (e / 60)), r = this.currentDate.format("m") == e ? "var(--white)" : "rgba(0,0,0,.87)", (d = this.createSVGElement("text", { id: "tm-" + e, class: "dtp-select-minute-text", "text-anchor": "middle", style: "cursor:pointer", "font-weight": "normal", "font-size": "20", x: s, y: n + 7, fill: r, "data-minute": e })).textContent = e, this.toggleTime(e, !1) ? d.addEventListener("click", this._onSelectMinute.bind(this)) : (d.className += " disabled", d.setAttribute("fill", "var(--grey)")), t.appendChild(d)); this._centerBox() }, animateHands: function () { var t = this.currentDate.hour(), e = this.currentDate.minute(), a = this.$dtpElement.find(".hour-hand"), i = this.$dtpElement.find(".minute-hand"); a[0].setAttribute("transform", "rotate(" + 360 * t / 12 + ")"), i[0].setAttribute("transform", "rotate(" + 360 * e / 60 + ")") }, createSVGClock: function (t) { var e, a, i = this.params.shortTime ? -120 : -90, s = this.createSVGElement("svg", { class: "svg-clock", viewBox: "0,0,400,400" }), n = this.createSVGElement("g", { transform: "translate(200,200) " }), r = this.createSVGElement("circle", { r: "192", fill: "var(--light-light)" }), d = this.createSVGElement("circle", { r: "4", fill: "var(--primary)" }); return n.appendChild(r), t ? (e = this.createSVGElement("line", { class: "minute-hand", x1: 0, y1: 0, x2: 0, y2: -150 }), a = this.createSVGElement("line", { class: "hour-hand", x1: 0, y1: 0, x2: 0, y2: i, stroke: "var(--primary)", "stroke-width": 3 }), n.appendChild(e), n.appendChild(a)) : (e = this.createSVGElement("line", { class: "minute-hand", x1: 0, y1: 0, x2: 0, y2: -150, stroke: "var(--primary)", "stroke-width": 3 }), a = this.createSVGElement("line", { class: "hour-hand", x1: 0, y1: 0, x2: 0, y2: i }), n.appendChild(a), n.appendChild(e)), n.appendChild(d), s.appendChild(n), this.$dtpElement.find("#dtp-svg-clock").empty(), this.$dtpElement.find("#dtp-svg-clock")[0].appendChild(s), this.animateHands(), n }, createSVGElement: function (t, e) { var a, i = document.createElementNS("http://www.w3.org/2000/svg", t); for (a in e) i.setAttribute(a, e[a]); return i }, isAfterMinDate: function (t, e, a) { var i, s = !0; return void 0 !== this.minDate && null !== this.minDate && (i = l(this.minDate), t = l(t), e || a || (i.hour(0), i.minute(0), t.hour(0), t.minute(0)), i.second(0), t.second(0), i.millisecond(0), t.millisecond(0), s = (a || (t.minute(0), i.minute(0)), parseInt(t.format("X")) >= parseInt(i.format("X")))), s }, isBeforeMaxDate: function (t, e, a) { var i, s = !0; return void 0 !== this.maxDate && null !== this.maxDate && (i = l(this.maxDate), t = l(t), e || a || (i.hour(0), i.minute(0), t.hour(0), t.minute(0)), i.second(0), t.second(0), i.millisecond(0), t.millisecond(0), s = (a || (t.minute(0), i.minute(0)), parseInt(t.format("X")) <= parseInt(i.format("X")))), s }, rotateElement: function (t, e) { r(t).css({ WebkitTransform: "rotate(" + e + "deg)", "-moz-transform": "rotate(" + e + "deg)" }) }, showDate: function (t) { t && (this.$dtpElement.find(".dtp-actual-day").html(t.locale(this.params.lang).format("dddd")), this.$dtpElement.find(".dtp-actual-month").html(t.locale(this.params.lang).format("MMM").toUpperCase()), this.$dtpElement.find(".dtp-actual-num").html(t.locale(this.params.lang).format("DD")), this.$dtpElement.find(".dtp-actual-year").html(t.locale(this.params.lang).format("YYYY"))) }, showTime: function (t) { var e; t && (e = t.minute(), e = (this.params.shortTime ? t.format("hh") : t.format("HH")) + ":" + (2 == e.toString().length ? e : "0" + e) + (this.params.shortTime ? " " + t.format("A") : ""), this.params.date ? this.$dtpElement.find(".dtp-actual-time").html(e) : (this.params.shortTime ? this.$dtpElement.find(".dtp-actual-day").html("") : this.$dtpElement.find(".dtp-actual-day").html("&nbsp;"), this.$dtpElement.find(".dtp-actual-maxtime").html(e))) }, selectDate: function (t) { t && (this.currentDate.date(t), this.showDate(this.currentDate), this.$element.trigger("dateSelected", this.currentDate)) }, generateCalendar: function (t) { var e = {}; if (null !== t) { var a = l(t).locale(this.params.lang).startOf("month"), i = l(t).locale(this.params.lang).endOf("month"), s = a.format("d"); e.week = this.days, e.days = []; for (var n = a.date(); n <= i.date(); n++) { if (n === a.date()) { var r = e.week.indexOf(s.toString()); if (0 < r) for (var d = 0; d < r; d++)e.days.push(0) } e.days.push(l(a).locale(this.params.lang).date(n)) } } return e }, constructHTMLCalendar: function (t, e) { for (var a = "", a = (a += '<div class="dtp-picker-month">' + t.locale(this.params.lang).format("MMMM YYYY") + "</div>") + '<div class="dtp-view" tabindex="0">' + '<table class="table table-dark dtp-picker-days"><thead>', i = 0; i < e.week.length; i++)a += "<th>" + l(parseInt(e.week[i]), "d").locale(this.params.lang).format("dd").substring(0, 1) + "</th>"; a += "</thead><tbody><tr>"; for (i = 0; i < e.days.length; i++)i % 7 == 0 && (a += "</tr><tr>"), a += '<td data-date="' + l(e.days[i]).locale(this.params.lang).format("D") + '">', 0 != e.days[i] && (!1 === this.isBeforeMaxDate(l(e.days[i]), !1, !1) || !1 === this.isAfterMinDate(l(e.days[i]), !1, !1) || -1 !== this.params.disabledDays.indexOf(e.days[i].isoWeekday()) ? a += '<span class="dtp-select-day">' + l(e.days[i]).locale(this.params.lang).format("DD") + "</span>" : l(e.days[i]).locale(this.params.lang).format("DD") === l(this.currentDate).locale(this.params.lang).format("DD") ? a += '<a href="javascript:void(0);" class="dtp-select-day selected">' + l(e.days[i]).locale(this.params.lang).format("DD") + "</a>" : a += '<a href="javascript:void(0);" class="dtp-select-day">' + l(e.days[i]).locale(this.params.lang).format("DD") + "</a>", a += "</td>"); return a += "</tr></tbody></table></div>" }, setName: function () { for (var t = "", e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", a = 0; a < 5; a++)t += e.charAt(Math.floor(Math.random() * e.length)); return t }, isPM: function () { return this.$dtpElement.find("a.dtp-meridien-pm").hasClass("selected") }, setElementValue: function () { this.$element.trigger("beforeChange", this.currentDate), void 0 !== r.material && this.$element.removeClass("empty"), this.$element.val(l(this.currentDate).locale(this.params.lang).format(this.params.format)), this.$element.trigger("change", this.currentDate) }, toggleButtons: function (t) { var e, a, i; t && t.isValid() && (e = l(t).locale(this.params.lang).startOf("month"), a = l(t).locale(this.params.lang).endOf("month"), i = l(t).locale(this.params.lang).startOf("year"), t = l(t).locale(this.params.lang).endOf("year"), this.isAfterMinDate(e, !1, !1) ? this.$dtpElement.find("a.dtp-select-month-before").removeClass("invisible") : this.$dtpElement.find("a.dtp-select-month-before").addClass("invisible"), this.isBeforeMaxDate(a, !1, !1) ? this.$dtpElement.find("a.dtp-select-month-after").removeClass("invisible") : this.$dtpElement.find("a.dtp-select-month-after").addClass("invisible"), this.isAfterMinDate(i, !1, !1) ? this.$dtpElement.find("a.dtp-select-year-before").removeClass("invisible") : this.$dtpElement.find("a.dtp-select-year-before").addClass("invisible"), this.isBeforeMaxDate(t, !1, !1) ? this.$dtpElement.find("a.dtp-select-year-after").removeClass("invisible") : this.$dtpElement.find("a.dtp-select-year-after").addClass("invisible")) }, toggleTime: function (t, e) { var a; return e ? ((a = l(this.currentDate)).hour(this.convertHours(t)).minute(0).second(0), !(!1 === this.isAfterMinDate(a, !0, !1) || !1 === this.isBeforeMaxDate(a, !0, !1))) : ((a = l(this.currentDate)).minute(t).second(0), !(!1 === this.isAfterMinDate(a, !0, !0) || !1 === this.isBeforeMaxDate(a, !0, !0))) }, _attachEvent: function (t, e, a) { t.on(e, null, null, a), this._attachedEvents.push([t, e, a]) }, _detachEvents: function () { for (var t = this._attachedEvents.length - 1; 0 <= t; t--)this._attachedEvents[t][0].off(this._attachedEvents[t][1], this._attachedEvents[t][2]), this._attachedEvents.splice(t, 1) }, _fireCalendar: function () { this.currentView = 0, this.$element.blur(), this.initDates(), this.show(), this.params.date ? (this.$dtpElement.find(".dtp-date").removeClass("d-none"), this.initDate()) : this.params.time && (this.$dtpElement.find(".dtp-time").removeClass("d-none"), this.initHours()) }, _onBackgroundClick: function (t) { t.stopPropagation(), this.hide() }, _onElementClick: function (t) { t.stopPropagation() }, _onKeydown: function (t) { 27 === t.which && this.hide() }, _onCloseClick: function () { this.hide(), this.$dtpElement.find(".dtp-actual-year").removeClass("text-white"), this.$dtpElement.find(".dtp-actual-month, .dtp-actual-num, .dtp-actual-day").removeClass("text-white-50") }, _onClearClick: function () { this.$dtpElement.find(".dtp-actual-year").removeClass("text-white"), this.$dtpElement.find(".dtp-actual-month, .dtp-actual-num, .dtp-actual-day").removeClass("text-white-50"), this.currentDate = null, this.$element.trigger("beforeChange", this.currentDate), this.hide(), void 0 !== r.material && this.$element.addClass("empty"), this.$element.val(""), this.$element.trigger("change", this.currentDate) }, _onNowClick: function () { if (this.$dtpElement.find(".dtp-actual-year").removeClass("text-white"), this.$dtpElement.find(".dtp-actual-month, .dtp-actual-num, .dtp-actual-day").removeClass("text-white-50"), this.currentDate = l(), !0 === this.params.date && (this.showDate(this.currentDate), 0 === this.currentView && this.initDate()), !0 === this.params.time) { switch (this.showTime(this.currentDate), this.currentView) { case 1: this.initHours(); break; case 2: this.initMinutes() }this.animateHands(), this.hide() } }, _onOKClick: function () { switch (this.$dtpElement.find(".dtp-actual-year").removeClass("text-white"), this.$dtpElement.find(".dtp-actual-month, .dtp-actual-num, .dtp-actual-day").removeClass("text-white-50"), this.currentView) { case 0: !0 === this.params.time ? this.initHours() : (this.setElementValue(), this.hide()); break; case 1: this.initMinutes(); break; case 2: this.setElementValue(), this.hide() } }, _onCancelClick: function () { if (this.$dtpElement.find(".dtp-actual-year").removeClass("text-white"), this.$dtpElement.find(".dtp-actual-month, .dtp-actual-num, .dtp-actual-day").removeClass("text-white-50"), this.params.time) switch (this.currentView) { case 0: this.hide(); break; case 1: this.params.date ? this.initDate() : this.hide(); break; case 2: this.initHours() } else this.hide() }, _onMonthBeforeClick: function () { this.currentDate.subtract(1, "months"), this.initDate(this.currentDate), this._closeYearPicker(), this.$dtpElement.find(".dtp-actual-year").removeClass("text-white"), this.$dtpElement.find(".dtp-actual-month, .dtp-actual-num, .dtp-actual-day").removeClass("text-white-50") }, _onMonthAfterClick: function () { this.currentDate.add(1, "months"), this.initDate(this.currentDate), this._closeYearPicker(), this.$dtpElement.find(".dtp-actual-year").removeClass("text-white"), this.$dtpElement.find(".dtp-actual-month, .dtp-actual-num, .dtp-actual-day").removeClass("text-white-50") }, _onYearBeforeClick: function () { this.currentDate.subtract(1, "years"), this.initDate(this.currentDate), this._closeYearPicker(), this.$dtpElement.find(".dtp-actual-year").removeClass("text-white"), this.$dtpElement.find(".dtp-actual-month, .dtp-actual-num, .dtp-actual-day").removeClass("text-white-50") }, _onYearAfterClick: function () { this.currentDate.add(1, "years"), this.initDate(this.currentDate), this._closeYearPicker(), this.$dtpElement.find(".dtp-actual-year").removeClass("text-white"), this.$dtpElement.find(".dtp-actual-month, .dtp-actual-num, .dtp-actual-day").removeClass("text-white-50") }, refreshYearItems: function () { var a = this.currentDate.year(), i = this.midYear, s = 1850, n = (void 0 !== this.minDate && null !== this.minDate && (s = l(this.minDate).year()), 2200); void 0 !== this.maxDate && null !== this.maxDate && (n = l(this.maxDate).year()), this.$dtpElement.find(".dtp-picker-year .invisible").removeClass("invisible"), this.$dtpElement.find(".year-picker-item").each(function (t, e) { t = i - 3 + t; r(e).attr("data-year", t).text(t).data("year", t), a == t ? r(e).addClass("active") : r(e).removeClass("active"), (t < s || n < t) && r(e).addClass("invisible") }), i - 3 <= s && this.$dtpElement.find(".dtp-select-year-range.before").addClass("invisible"), n <= i + 3 && this.$dtpElement.find(".dtp-select-year-range.after").addClass("invisible"), this.$dtpElement.find(".dtp-select-year-range").data("mid", i) }, _onActualYearClick: function () { this.params.year && (0 < this.$dtpElement.find(".dtp-picker-year.d-none").length ? (this.$dtpElement.find(".dtp-picker-datetime").addClass("d-none"), this.$dtpElement.find(".dtp-picker-calendar").addClass("d-none"), this.$dtpElement.find(".dtp-picker-year").removeClass("d-none"), this.$dtpElement.find(".dtp-actual-year").addClass("text-white"), this.$dtpElement.find(".dtp-actual-month, .dtp-actual-num, .dtp-actual-day").addClass("text-white-50"), this.midYear = this.currentDate.year(), this.refreshYearItems()) : this._closeYearPicker()) }, _onYearRangeBeforeClick: function () { this.midYear -= 7, this.refreshYearItems() }, _onYearRangeAfterClick: function () { this.midYear += 7, this.refreshYearItems() }, _onYearItemClick: function (t) { var t = r(t.currentTarget).data("year"), e = this.currentDate.year(); this.currentDate.add(t - e, "years"), this.initDate(this.currentDate), this.$dtpElement.find(".dtp-actual-year").removeClass("text-white"), this.$dtpElement.find(".dtp-actual-month, .dtp-actual-num, .dtp-actual-day").removeClass("text-white-50"), this._closeYearPicker(), this.$element.trigger("yearSelected", this.currentDate) }, _closeYearPicker: function () { this.$dtpElement.find(".dtp-picker-calendar").removeClass("d-none"), this.$dtpElement.find(".dtp-picker-year").addClass("d-none") }, enableYearPicker: function () { this.params.year = !0, this.$dtpElement.find(".dtp-actual-year").removeClass("disabled") }, disableYearPicker: function () { this.params.year = !1, this.$dtpElement.find(".dtp-actual-year").addClass("disabled"), this._closeYearPicker() }, _onSelectDate: function (t) { this.$dtpElement.find("a.dtp-select-day").removeClass("selected"), r(t.currentTarget).addClass("selected"), this.selectDate(r(t.currentTarget).parent().data("date")), !0 === this.params.switchOnClick && !0 === this.params.time && setTimeout(this.initHours.bind(this), 200), !0 === this.params.switchOnClick && !1 === this.params.time && setTimeout(this._onOKClick.bind(this), 200) }, _onSelectHour: function (t) { if (!r(t.target).hasClass("disabled")) { for (var e = r(t.target).data("hour"), t = r(t.target).parent(), a = t.find(".dtp-select-hour"), i = t.find(".dtp-select-hour-text"), s = 0; s < a.length; s++)r(a[s]).attr("fill", "transparent"); for (s = 0; s < i.length; s++)r(i[s]).attr("fill", "var(--black)"); r(t.find("#h-" + e)).attr("fill", "var(--primary)"), r(t.find("#th-" + e)).attr("fill", "var(--white)"), this.currentDate.hour(parseInt(e)), !0 === this.params.shortTime && this.isPM() && this.currentDate.add(12, "hours"), this.showTime(this.currentDate), this.animateHands(), !0 === this.params.switchOnClick && setTimeout(this.initMinutes.bind(this), 200) } }, _onSelectMinute: function (t) { if (!r(t.target).hasClass("disabled")) { for (var e = r(t.target).data("minute"), t = r(t.target).parent(), a = t.find(".dtp-select-minute"), i = t.find(".dtp-select-minute-text"), s = 0; s < a.length; s++)r(a[s]).attr("fill", "transparent"); for (s = 0; s < i.length; s++)r(i[s]).attr("fill", "var(--black)"); r(t.find("#m-" + e)).attr("fill", "var(--primary)"), r(t.find("#tm-" + e)).attr("fill", "var(--white)"), this.currentDate.minute(parseInt(e)), this.showTime(this.currentDate), this.animateHands(), !0 === this.params.switchOnClick && setTimeout(function () { this.setElementValue(), this.hide() }.bind(this), 200) } }, _onSelectAM: function (t) { r(".dtp-actual-meridien").find("a").removeClass("selected"), r(t.currentTarget).addClass("selected"), 12 <= this.currentDate.hour() && this.currentDate.subtract(12, "hours") && this.showTime(this.currentDate), this.toggleTime(1 === this.currentView) }, _onSelectPM: function (t) { r(".dtp-actual-meridien").find("a").removeClass("selected"), r(t.currentTarget).addClass("selected"), this.currentDate.hour() < 12 && this.currentDate.add(12, "hours") && this.showTime(this.currentDate), this.toggleTime(1 === this.currentView) }, _hideCalendar: function () { this.$dtpElement.find(".dtp-picker-calendar").addClass("d-none") }, convertHours: function (t) { var e = t; return !0 === this.params.shortTime && t < 12 && this.isPM() && (e += 12), e }, setDate: function (t) { this.params.currentDate = t, this.initDates() }, setMinDate: function (t) { this.params.minDate = t, this.initDates() }, setMaxDate: function (t) { this.params.maxDate = t, this.initDates() }, destroy: function () { this._detachEvents(), this.$dtpElement.remove() }, show: function () { this.$dtpElement.removeClass("d-none"), this._attachEvent(r(window), "keydown", this._onKeydown.bind(this)), this._centerBox(), this.$element.trigger("open"), !0 === this.params.monthPicker && this._hideCalendar() }, hide: function () { r(window).off("keydown", null, null, this._onKeydown.bind(this)), this.$dtpElement.addClass("d-none"), this.$element.trigger("close") }, _centerBox: function () { var t = (this.$dtpElement.height() - this.$dtpElement.find(".dtp-content").height()) / 2; this.$dtpElement.find(".dtp-content").css("marginLeft", -this.$dtpElement.find(".dtp-content").width() / 2 + "px"), this.$dtpElement.find(".dtp-content").css("top", t + "px") }, enableDays: function () { var t = this.params.enableDays; t && r(".dtp-picker-days tbody tr td").each(function () { 0 <= r.inArray(r(this).index(), t) || r(this).find("a").css({ background: "#e3e3e3", cursor: "no-drop", opacity: "0.5" }).off("click") }) } } });
//# sourceMappingURL=gmdatetimepicker.min.js.map