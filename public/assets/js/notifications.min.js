// notifications.min.js
let base_url = window.location.protocol + "//" + window.location.host + "/" + window.location.pathname.split('/')[1];

class NotificationManager {
  constructor() {
    this.notificationSound = new Audio(base_url + 'assets/sounds/notification.mp3');
    this.pollingInterval = 30000; // 30 segundos
    this.notificationBadge = $('#notification-badge');
    this.notificationDropdown = $('#notification-dropdown');
    this.init();
  }

  init() {
    this.checkNotifications();
    setInterval(() => this.checkNotifications(), this.pollingInterval);

    // Marcar como leídas al hacer clic
    $(document).on('click', '.notification-item', function () {
      const notificationId = $(this).data('id');
      if (notificationId) {
        $.post(base_url + 'notifications/markAsRead', { ids: [notificationId] });
      }
    });
  }

  async checkNotifications() {
    try {
      const response = await fetch(base_url + 'notifications/getUnread');
      const notifications = await response.json();

      if (notifications.length > 0) {
        this.updateBadge(notifications.length);
        this.playSound();
        this.updateDropdown(notifications);
      }
    } catch (error) {
      console.error('Error checking notifications:', error);
    }
  }

  updateBadge(count) {
    this.notificationBadge.text(count).toggleClass('d-none', count === 0);
  }

  playSound() {
    if (Notification.permission === 'granted') {
      this.notificationSound.play().catch(e => console.log('Fllo al reproducir el sonido:', e));
    }
  }

  updateDropdown(notifications) {
    let dropdownContent = '';

    notifications.forEach(notif => {
      dropdownContent += `
                <a class="dropdown-item notification-item d-flex align-items-center" 
                   href="${notif.link || '#'}" data-id="${notif.id || ''}">
                    <div class="mr-3">
                        <div class="icon-circle bg-${this.getNotificationColor(notif.type)}">
                            <i class="fas ${this.getNotificationIcon(notif.type)} text-white"></i>
                        </div>
                    </div>
                    <div>
                        <div class="small text-gray-500">${notif.time}</div>
                        <span class="${notif.is_read ? '' : 'font-weight-bold'}">
                            ${notif.message}
                        </span>
                    </div>
                </a>`;
    });

    if (notifications.length === 0) {
      dropdownContent = '<span class="dropdown-item">No hay notificaciones</span>';
    } else {
      dropdownContent += '<a class="dropdown-item text-center small text-gray-500" href="<?= base_url("notifications") ?>">Ver todas</a>';
    }

    this.notificationDropdown.html(dropdownContent);
  }

  getNotificationColor(type) {
    const colors = {
      'new_ticket': 'primary',
      'ticket_update': 'info',
      'ticket_closed': 'success',
      'assignment': 'warning'
    };
    return colors[type] || 'secondary';
  }

  getNotificationIcon(type) {
    const icons = {
      'new_ticket': 'fa-ticket-alt',
      'ticket_update': 'fa-sync-alt',
      'ticket_closed': 'fa-check-circle',
      'assignment': 'fa-user-tag'
    };
    return icons[type] || 'fa-bell';
  }
}

// Inicializar cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', () => {
  new NotificationManager();

  // Solicitar permiso para notificaciones
  if ('Notification' in window) {
    Notification.requestPermission();
  }
});