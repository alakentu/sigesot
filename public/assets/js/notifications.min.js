/**
 * notifications.min.js 
 */

// Configuración segura de la URL base
const base_url = (() => {
  try {
    const pathSegment = window.location.pathname.split('/')[1] || '';
    return new URL(`${window.location.origin}/${pathSegment}`).href.replace(/\/$/, '');
  } catch (e) {
    console.error('Error construyendo base_url:', e);
    return window.location.origin;
  }
})();

class NotificationManager {
  constructor() {
    // Configuración de rutas
    this.soundBasePath = base_url + '/assets/sounds/';

    // Mapeo de sonidos por prioridad
    this.prioritySounds = {
      'alta': 'alarm.mp3',
      'media': 'alert.mp3',
      'baja': 'notify.mp3' // Este es tu sonido predeterminado
    };

    // Estado del sistema
    this.soundPlayed = false;
    this.pollingInterval = 30000; // 30 segundos
    this.lastSoundTime = 0;

    // Elementos UI
    this.notificationsContainer = $('#notifications-container')[0];
    this.notificationBadge = $('#notification-badge');
    this.notificationDropdown = $('#notification-dropdown');

    if (!this.notificationsContainer || !this.notificationBadge) {
      $('#notifications-container')
      console.error('Elementos del DOM no encontrados');
      return;
    }

    // Precargar sonidos (opcional)
    this.notificationSound = new Audio(); // Objeto genérico
    this.preloadSounds();

    this.init();
  }

  // Precarga los sonidos para mejor performance
  preloadSounds() {
    Object.values(this.prioritySounds).forEach(sound => {
      const audio = new Audio(this.soundBasePath + sound);
      audio.load();
    });
  }

  init() {
    this.checkNotifications();
    setInterval(() => this.checkNotifications(), this.pollingInterval);

    // Solicitar permisos solo al hacer clic en el ícono de campana de notificaciones
    document.getElementById('navbarDropdownNotifications').addEventListener('click', () => {
      if ('Notification' in window && Notification.permission === 'default') {
        Notification.requestPermission().then(permission => {
          console.log('Permiso:', permission);
        });
      }
    });

    // Delegación de eventos para marcar como leídas
    document.addEventListener('click', async (e) => {
      const notificationItem = e.target.closest('.notification-item');
      if (notificationItem) {
        e.preventDefault();
        const notificationId = notificationItem.dataset.id;
        const href = notificationItem.getAttribute('href');

        if (notificationId) {
          await this.markAsRead([notificationId]);
        }
        window.location.href = href;
      }
    });
  }

  async markAsRead(notificationIds) {
    try {
      await fetch(base_url + '/admin/tickets/mark_as_read', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: notificationIds })
      });
    } catch (error) {
      console.error('Error marcando como leída:', error);
    }
  }

  requestNotificationPermission() {
    if ('Notification' in window) {
      Notification.requestPermission().then(permission => {
        if (permission === 'granted') {
          console.log('Permiso para notificaciones concedido');
        }
      });
    }
  }

  showSystemNotification(notification) {
    if ('Notification' in window && Notification.permission === 'granted') {
      const priorityIcons = {
        'alta': 'high.svg',
        'media': 'medium.svg',
        'baja': 'low.svg'
      };

      new Notification(`Ticket ${notification.priority.toUpperCase()}: ${notification.title}`, {
        body: notification.message,
        icon: `${base_url}/assets/images/icons/${priorityIcons[notification.priority.toLowerCase()] || 'low.svg'}`,
        vibrate: notification.priority === 'alta' ? [500, 200, 500] : [200, 100, 200]
      });
    }
  }

  async checkNotifications() {
    try {
      const response = await fetch(base_url + '/admin/tickets/notifications');
      if (!response.ok) throw new Error('HTTP ' + response.status);

      const notifications = await response.json();

      this.updateDropdown(notifications);
      const is_read = notifications.some(n => !n.is_read);

      notifications.forEach(notif => {
        if (!notif.is_read && notif.play_sound) {
          this.playSound(notif.priority || 'baja');
        }
        this.showToast(notif);
      });
    } catch (error) {
      console.error('Error verificando notificaciones:', error);
    }
  }

  updateBadge(count) {
    this.notificationBadge.text(count).toggleClass('d-none', count === 0);
  }

  playSound(priority = 'baja') {
    try {
      if (!this.soundBasePath) return;

      const soundFile = this.prioritySounds[priority] || this.prioritySounds['baja'];
      const soundPath = `${this.soundBasePath}${soundFile}`;

      // Crear nuevo elemento cada vez
      const audio = new Audio(soundPath);
      audio.volume = 0.7; // Volumen moderado
      audio.play().catch(e => {
        console.log('Reproducción automática bloqueada:', e);
        // Activar solo tras interacción
        document.addEventListener('click', () => audio.play(), { once: true });
      });
    } catch (e) {
      console.error('Error en playSound:', e);
    }
  }

  updateDropdown(notifications) {
    if (!this.notificationsContainer) return;

    let dropdownContent = '';

    // Función para obtener iconos de Bootstrap Icons
    const getNotificationIcon = (type) => {
      const icons = {
        alta: 'bi-exclamation-triangle-fill',
        media: 'bi-exclamation-circle-fill',
        baja: 'bi-info-circle-fill'
      };
      return icons[type] || 'bi-bell-fill';
    };

    // Función para colores
    const getNotificationColor = (priority) => {
      const colors = [];
      // Mapeo de colores
      switch (priority) {
        case 'alta':
          colors.push('danger');
        case 'media':
          colors.push('warning');
        case 'baja':
          colors.push('success');
      }

      return colors.join(' ', colors.length);
    };

    if (notifications.length === 0) {
      dropdownContent = `
        <li class="nav-item py-2 px-3">
            <div class="text-center text-muted small">
                No hay notificaciones nuevas
            </div>
        </li>`;
    } else {
      notifications.forEach(notif => {
        const priority = notif.priority?.toLowerCase() || 'baja';
        dropdownContent += `
            <li class="nav-item">
                <a class="dropdown-item notification-item d-flex align-items-center py-2" 
                   href="${this.sanitizeUrl(notif.link)}" 
                   data-id="${notif.id}">
                    <div class="flex-shrink-0 me-3">
                        <div class="bg-${getNotificationColor(priority)} rounded-circle p-2">
                            <i class="bi ${getNotificationIcon(notif.type)} text-white"></i>
                        </div>
                    </div>

                    <div class="w-100 flex-grow-1">
                      <div class="mb-1">${this.escapeHtml(notif.title) || 'Notificación'}</div>
                      <div class="text-muted small">
                        ${this.escapeHtml(notif.message)}
                        <div class="text-primary">${notif.time || 'Reciente'}</div>
                      </div>
                    </div>
                </a>
            </li>`;
      });
    }

    this.notificationsContainer.innerHTML = dropdownContent;

    const unread = notifications.filter(n => !n.is_read).length;
    this.updateBadge(unread); // Actualiza solo no leídas
  }

  getNotificationColor(type) {
    const colors = [];
    // Mapeo de colores
    switch (type) {
      case 'new_ticket':
        colors.push('primary');
      case 'ticket_update':
        colors.push('info');
      case 'ticket_closed':
        colors.push('success');
      case 'assignment':
        colors.push('warning');
    }

    return colors.join(' ', colors.length);
  }

  getNotificationIcon(type) {
    const colors = [];
    // Mapeo de colores
    switch (type) {
      case 'new_ticket':
        colors.push('bi bi-ticket-detailed');
      case 'ticket_update':
        colors.push('bi bi-arrow-repeat');
      case 'ticket_closed':
        colors.push('bi bi-check2-circle');
      case 'assignment':
        colors.push('bi bi-person-exclamation');
    }

    return colors.join(' ', colors.length);
  }

  showToast(notification) {
    const toastType = this.getToastType(notification.type);
    const toastOptions = {
      message: notification.message,
      duration: 5000,
      position: 'top-right',
      closeButton: true,
      onClick: () => {
        this.markAsRead([notification.id]);
        window.location.href = notification.link;
      }
    };

    switch (toastType) {
      case 'success':
        Toastastic.success(notification.message, toastOptions);
        break;
      case 'error':
        Toastastic.error(notification.message, toastOptions);
        break;
      case 'warning':
        Toastastic.warning(notification.message, toastOptions);
        break;
      default:
        Toastastic.custom({
          ...toastOptions,
          type: toastType
        });
    }
  }

  getToastType(notificationType) {
    const typeMap = {
      'new_ticket': 'info',
      'ticket_update': 'warning',
      'ticket_closed': 'success',
      'assignment': 'info',
      'alta': 'error',
      'media': 'warning',
      'baja': 'info'
    };
    return typeMap[notificationType] || 'info';
  }

  getTicketIdFromUrl() {
    // Intenta con formato /details/ID
    let match = window.location.pathname.match(/tickets\/details\/(\d+)/)?.[1];
    if (match) return parseInt(match[1]);

    // Si no, prueba con parámetro GET ?id=ID
    const urlParams = new URLSearchParams(window.location.search);
    const idParam = urlParams.get('id');
    if (idParam && !isNaN(idParam)) return parseInt(idParam);

    return null; // No se encontró ID válido
  }

  /**
   * Helper: Sanitiza URLs
   */
  sanitizeUrl(url) {
    if (!url) return '#';
    try {
      const u = new URL(url, base_url);
      return u.href;
    } catch {
      return '#';
    }
  }

  /**
   * Helper: Escapa HTML
   */
  escapeHtml(str) {
    return str?.toString()
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;') || '';
  }
}

// Inicializar cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', () => {
  const notificationManager = new NotificationManager();
  const ticketId = notificationManager.getTicketIdFromUrl();

  if (ticketId) {
    notificationManager.markAsRead([ticketId]); // Marca como leído al cargar la página
  }

  // Solicitar permiso al cargar
  if (notificationManager.notificationsContainer) {
    notificationManager.requestNotificationPermission();
  }
});