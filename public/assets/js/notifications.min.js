// notifications.min.js
let base_url = window.location.protocol + "//" + window.location.host + "/" + window.location.pathname.split('/')[1];

class NotificationManager {
  constructor() {
    // Configuración de rutas
    this.soundBasePath = base_url + 'assets/sounds/';

    // Mapeo de sonidos por prioridad
    this.prioritySounds = {
      'alta': 'alarm.mp3',
      'media': 'alert.mp3',
      'baja': 'notify.mp3' // Este es tu sonido predeterminado
    };

    // Estado del sistema
    this.soundPlayed = false;
    this.pollingInterval = 30000; // 30 segundos
    this.lastSoundTime = 0;

    // Elementos UI
    this.notificationBadge = $('#notification-badge');
    this.notificationDropdown = $('#notification-dropdown');

    // Precargar sonidos (opcional)
    this.notificationSound = new Audio(); // Objeto genérico
    this.preloadSounds();

    this.init();
  }

  // Precarga los sonidos para mejor performance
  preloadSounds() {
    Object.values(this.prioritySounds).forEach(sound => {
      const audio = new Audio(this.soundBasePath + sound);
      audio.load();
    });
  }

  init() {
    this.checkNotifications();
    setInterval(() => this.checkNotifications(), this.pollingInterval);

    // Marcar como leídas al hacer clic
    $(document).on('click', '.notification-item', function () {
      const notificationId = $(this).data('id');
      if (notificationId) {
        $.post(base_url + 'notifications/markAsRead', { ids: [notificationId] });
      }
    });
  }

  requestNotificationPermission() {
    if ('Notification' in window) {
      Notification.requestPermission().then(permission => {
        if (permission === 'granted') {
          console.log('Permiso para notificaciones concedido');
        }
      });
    }
  }

  showSystemNotification(notification) {
    if ('Notification' in window && Notification.permission === 'granted') {
      const priorityIcons = {
        'alta': 'high.svg',
        'media': 'medium.svg',
        'baja': 'low.svg'
      };

      new Notification(`Ticket ${notification.priority.toUpperCase()}: ${notification.title}`, {
        body: notification.message,
        icon: `${base_url}assets/images/icons/${priorityIcons[notification.priority.toLowerCase()] || 'low.svg'}`,
        vibrate: notification.priority === 'alta' ? [500, 200, 500] : [200, 100, 200]
      });
    }
  }

  async checkNotifications() {
    try {
      const response = await fetch(base_url + 'tickets/notifications');
      const notifications = await response.json();

      if (notifications.length > 0) {
        this.updateBadge(notifications.length);
        this.updateDropdown(notifications);

        notifications.forEach(notif => {
          this.showSystemNotification(notif);
          if (notif.play_sound) {
            this.playSound(notif.priority?.toLowerCase()); // Pasar solo la prioridad
          }
        });

        // Control de frecuencia de sonido
        if (notifications.some(notif => notif.play_sound) &&
          (Date.now() - this.lastSoundTime > 5000)) {
          this.lastSoundTime = Date.now();
        }
      }

      fetch(base_url + 'tickets/notifications/read', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: [notificationId] })
      });
    } catch (error) {
      console.error('Error verificando notificaciones:', error);
    }
  }

  updateBadge(count) {
    this.notificationBadge.text(count).toggleClass('d-none', count === 0);
  }

  playSound(priority = 'baja') {
    try {
      const soundFile = this.prioritySounds[priority] || this.prioritySounds['baja'];
      this.notificationSound.src = this.soundBasePath + soundFile;
      this.notificationSound.currentTime = 0;

      if (document.hasFocus()) {
        this.notificationSound.play().catch(e => {
          console.log('Error al reproducir:', e);
          // Fallback: Intentar reproducir el sonido predeterminado
          if (soundFile !== 'notify.mp3') {
            this.notificationSound.src = this.soundBasePath + 'notify.mp3';
            this.notificationSound.play().catch(console.error);
          }
        });
      }
    } catch (e) {
      console.error('Error en playSound:', e);
    }
  }

  updateDropdown(notifications) {
    let dropdownContent = '';

    notifications.forEach(notif => {
      dropdownContent += `
                <a class="dropdown-item notification-item d-flex align-items-center" 
                   href="${notif.link || '#'}" data-id="${notif.id || ''}">
                    <div class="mr-3">
                        <div class="icon-circle bg-${this.getNotificationColor(notif.type)}">
                            <i class="fas ${this.getNotificationIcon(notif.type)} text-white"></i>
                        </div>
                    </div>
                    <div>
                        <div class="small text-gray-500">${notif.time}</div>
                        <span class="${notif.is_read ? '' : 'font-weight-bold'}">
                            ${notif.message}
                        </span>
                    </div>
                </a>`;
    });

    if (notifications.length === 0) {
      dropdownContent = '<span class="dropdown-item">No hay notificaciones</span>';
    } else {
      dropdownContent += '<a class="dropdown-item text-center small text-gray-500" href="<?= base_url("notifications") ?>">Ver todas</a>';
    }

    this.notificationDropdown.html(dropdownContent);
  }

  getNotificationColor(type) {
    const colors = {
      'new_ticket': 'primary',
      'ticket_update': 'info',
      'ticket_closed': 'success',
      'assignment': 'warning'
    };
    return colors[type] || 'secondary';
  }

  getNotificationIcon(type) {
    const icons = {
      'new_ticket': 'fa-ticket-alt',
      'ticket_update': 'fa-sync-alt',
      'ticket_closed': 'fa-check-circle',
      'assignment': 'fa-user-tag'
    };
    return icons[type] || 'fa-bell';
  }
}

// Inicializar cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', () => {
  const manager = new NotificationManager();
  manager.requestNotificationPermission(); // Solicitar permiso al cargar
});