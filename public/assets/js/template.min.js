(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jquery')) :
    typeof define === 'function' && define.amd ? define(['exports', 'jquery'], factory) :
      (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.adminlte = {}, global.jQuery));
})(this, (function (exports, $) {
  'use strict';
  var $window = $(window),
    body = $('body'),
    content_wrapper = $('.content-wrapper'),
    scroller = $('.container-scroller'),
    sidebar = $('#sidebar'),
    current = location.pathname.split("/").slice(-1)[0].replace(/^\/|\/$/g, ''),
    activenav,
    matches = document.body.className.match(/(^|\s)page-(\w+)(\s|$)/),
    admin_class = document.body.className.match(/\S+/g),
    message = $('#message'),
    form = $('form'),
    base_url = window.location.protocol + "//" + window.location.host + "/" + window.location.pathname.split('/')[1],
    user_lang = navigator.language || navigator.userLanguage;

  $('a[href="#"]').click(function (e) {
    e.preventDefault()
  });

  $('select').on('change', function () {
    $('option:selected', this).attr('selected', true).siblings().removeAttr('selected');
  });

  $.fn.uncheckableRadio = function () {
    return this.each(function () {
      var radio = this,
        label = $('label[for="' + radio.id + '"]');
      if (label.length === 0) {
        label = $(radio).closest("label");
      }
      var label_radio = label.add(radio);
      label_radio.mousedown(function () {
        $(radio).data('wasChecked', radio.checked);
      });
      label_radio.click(function () {
        if ($(radio).data('wasChecked')) {
          radio.checked = false;
        }
      });
    });
  };

  $(document).on('click', ':radio', function () {
    var radio = $(this);
    radio.trigger(radio.data('ischecked') ? 'uncheck' : 'check');
  });

  $(document).on('change', ':radio', function () {
    var siblings = $(':radio[name="' + this.name + '"]').not(this);
    siblings.each(function () {
      var sibling = $(this);
      if (sibling.data('ischecked')) {
        sibling.trigger('uncheck');
      }
    });
  });

  $(document).on('check uncheck', ':radio', function (e) {
    var checked = (e.type === 'check');
    $(this).data('ischecked', checked).attr('checked', checked);
  });

  $(document).filter(':checked').each(function (i, r) {
    $(this).trigger('check');
  });

  $(document).on('click', ':checkbox', function () {
    var checkbox = $(this);
    checkbox.trigger(checkbox.data('ischecked') ? 'uncheck' : 'check');
  });

  $(document).on('click', ':checkbox', function () {
    var checkbox = $(this),
      checked = checkbox.is(':checked'),
      d_check = checkbox.data('check'),
      d_uncheck = checkbox.data('uncheck');

    if (checked) {
      checkbox.val(d_check);
    } else {
      checkbox.val(d_uncheck);
    }
  });

  $(document).on('change', ':checkbox', function () {
    var siblings = $(':checkbox[name="' + this.name + '"]').not(this);
    siblings.each(function () {
      var sibling = $(this);
      if (sibling.data('ischecked')) {
        sibling.trigger('uncheck');
      }
    });
  });

  $(document).on('change', ':checkbox', function () {
    var siblings = $(':checkbox[name="' + this.name + '"]').not(this);
    siblings.each(function () {
      var sibling = $(this);
      if (sibling.data('ischecked')) {
        sibling.trigger('uncheck');
      }
    });
  });

  $(document).on('change', ':checkbox:checkbox:not([name="groups[]"])', function () {
    var siblings = $(':checkbox[name="' + this.name + '"]').not(this);
    siblings.each(function () {
      var sibling = $(this);
      if (sibling.data('ischecked')) {
        sibling.trigger('uncheck');
      }
    });
  });

  $(document).on('check uncheck', ':checkbox', function (e) {
    var checked = (e.type === 'check');
    $(this).data('ischecked', checked).attr('checked', checked);
  });

  $(document).filter(':checked').each(function (i, r) {
    $(this).trigger('check');
  });

  $(document).on('keyup keypress', 'form input[type="text"]', function (e) {
    if (e.which == 13) {
      e.preventDefault();
      return false;
    }
  });

  $(function () {
  });
}));

(function () {
  ("use strict");

  const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
  const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));

  Array.from(document.querySelectorAll("form .auth-pass-inputgroup")).forEach(function (item) {
    Array.from(item.querySelectorAll(".password-addon")).forEach(function (subitem) {
      subitem.addEventListener("click", function (event) {
        const passwordInput = item.querySelector(".password-input");
        const passwordIcon = item.querySelector(".password-addon i");
        const tooltip = bootstrap.Tooltip.getInstance('#toggle-password');

        if (passwordInput.type === "password") {
          passwordInput.type = "text";
          passwordIcon.classList.remove("bi-eye");
          passwordIcon.classList.add("bi-eye-slash");
          tooltip.setContent({ '.tooltip-inner': "Ocultar contraseña" });
        } else {
          passwordInput.type = "password";
          passwordIcon.classList.remove("bi-eye-slash");
          passwordIcon.classList.add("bi-eye");
          tooltip.setContent({ '.tooltip-inner': "Mostrar contraseña" });
        }
      });
    });
  });
})();